var searchIndex = JSON.parse('{\
"polars":{"doc":"Polars DataFrames in Rust","i":[[0,"chunked_array","polars","The typed heart of every Series column.",null,null],[3,"ChunkedArray","polars::chunked_array","",null,null],[0,"aggregate","","",null,null],[8,"Agg","polars::chunked_array::aggregate","",null,null],[10,"sum","","",0,[[],["option",4]]],[10,"min","","",0,[[],["option",4]]],[10,"max","","",0,[[],["option",4]]],[0,"apply","polars::chunked_array","",null,null],[8,"Apply","polars::chunked_array::apply","",null,null],[10,"apply","","",1,[[]]],[0,"arithmetic","polars::chunked_array","",null,null],[8,"Pow","polars::chunked_array::arithmetic","",null,null],[10,"pow_f32","","",2,[[],["float32chunked",6]]],[10,"pow_f64","","",2,[[],["float64chunked",6]]],[0,"builder","polars::chunked_array","",null,null],[3,"PrimitiveChunkedBuilder","polars::chunked_array::builder","",null,null],[12,"builder","","",3,null],[3,"Utf8ChunkedBuilder","","",null,null],[12,"builder","","",4,null],[3,"AlignedVec","","",null,null],[12,"0","","",5,null],[5,"build_primitive_ca_with_opt","","",null,[[],["chunkedarray",3]]],[5,"build_with_existing_null_bitmap","","Take an existing slice and a null bitmap and construct an…",null,[[["buffer",3],["option",4]],["primitivearray",3]]],[5,"get_bitmap","","Get the null count and the null bitmap of the arrow array",null,[[]]],[5,"round_upto_multiple_of_64","","Returns the nearest number that is `>=` than `num` and is…",null,[[]]],[5,"vec_to_primitive_array","","Take an owned Vec and create a zero copy PrimitiveArray",null,[[["vec",3]],[["primitivearray",3],["arrowprimitivetype",8]]]],[8,"AlignedAlloc","","",null,null],[10,"with_capacity_aligned","","",6,[[],["vec",3]]],[11,"new","","",3,[[]]],[11,"new_from_iter","","",3,[[],["chunkedarray",3]]],[11,"finish","","",3,[[],["chunkedarray",3]]],[11,"new","","",4,[[]]],[11,"finish","","",4,[[],["utf8chunked",6]]],[0,"cast","polars::chunked_array","",null,null],[8,"ChunkCast","polars::chunked_array::cast","",null,null],[10,"cast","","",7,[[],[["result",6],["chunkedarray",3]]]],[0,"comparison","polars::chunked_array","",null,null],[8,"CmpOps","polars::chunked_array::comparison","Compare Series",null,null],[10,"eq","","Check for equality.",8,[[],["booleanchunked",6]]],[10,"neq","","Check for inequality.",8,[[],["booleanchunked",6]]],[10,"gt","","Greater than comparison.",8,[[],["booleanchunked",6]]],[10,"gt_eq","","Greater than or equal comparison.",8,[[],["booleanchunked",6]]],[10,"lt","","Less than comparison.",8,[[],["booleanchunked",6]]],[10,"lt_eq","","Less than or equal comparison",8,[[],["booleanchunked",6]]],[8,"NumComp","","",null,null],[0,"iterator","polars::chunked_array","",null,null],[3,"NumIterSingleChunkNullCheck","polars::chunked_array::iterator","Single chunk with null values",null,null],[3,"NumIterSingleChunk","","Single chunk no null values",null,null],[3,"NumIterManyChunkNullCheck","","Many chunks with null checks",null,null],[3,"NumIterManyChunk","","Many chunks no null checks",null,null],[3,"ChunkStringIter","","",null,null],[3,"ChunkBoolIter","","",null,null],[3,"ChunkNumIter","","Specialized Iterator for ChunkedArray",null,null],[0,"take","polars::chunked_array","Traits to provide fast Random access to ChunkedArrays…",null,null],[3,"NumTakeRandomChunked","polars::chunked_array::take","",null,null],[3,"NumTakeRandomCont","","",null,null],[3,"NumTakeRandomSingleChunk","","",null,null],[3,"Utf8TakeRandom","","",null,null],[3,"Utf8TakeRandomSingleChunk","","",null,null],[3,"BoolTakeRandom","","",null,null],[3,"BoolTakeRandomSingleChunk","","",null,null],[8,"Take","","",null,null],[10,"take","","Take values from ChunkedArray by index.",9,[[["option",4]],["result",6]]],[10,"take_opt","","Take values from ChunkedArray by Option.",9,[[["option",4]],["result",6]]],[8,"TakeIndex","","",null,null],[10,"as_take_iter","","",10,[[],[["iterator",8],["box",3]]]],[11,"as_opt_take_iter","","",10,[[],[["box",3],["iterator",8]]]],[10,"take_index_len","","",10,[[]]],[8,"IntoTakeRandom","","",null,null],[16,"Item","","",11,null],[10,"take_rand","","",11,[[],[["takerandom",8],["box",3]]]],[8,"TakeRandom","","",null,null],[16,"Item","","",12,null],[10,"get","","",12,[[],["option",4]]],[10,"get_unchecked","","",12,[[]]],[0,"unique","polars::chunked_array","",null,null],[8,"Unique","polars::chunked_array::unique","",null,null],[10,"unique","","Get unique values of a ChunkedArray",13,[[],["chunkedarray",3]]],[10,"arg_unique","","Get first index of the unique values in a ChunkedArray.",13,[[],["vec",3]]],[8,"ValueCounts","","",null,null],[10,"value_counts","","",14,[[],[["buildhasherdefault",3],["hashmap",3],["option",4]]]],[8,"Downcast","polars::chunked_array","",null,null],[10,"downcast_chunks","","",15,[[],["vec",3]]],[8,"ChunkSort","","",null,null],[10,"sort","","",16,[[],["chunkedarray",3]]],[10,"sort_in_place","","",16,[[]]],[10,"argsort","","",16,[[],["vec",3]]],[8,"ChunkFull","","Fill a ChunkedArray with one value.",null,null],[10,"full","","Create a ChunkedArray with a single value.",17,[[]]],[8,"Reverse","","",null,null],[10,"reverse","","",18,[[],["chunkedarray",3]]],[11,"new_from_chunks","","Create a new ChunkedArray from existing chunks.",19,[[["arrayref",6],["vec",3]]]],[11,"null_bits","","Get the null count and the buffer of bits representing…",19,[[],["vec",3]]],[11,"into_series","","Wrap as Series",19,[[],["series",4]]],[11,"chunk_id","","",19,[[],["vec",3]]],[11,"chunks","","A reference to the chunks",19,[[],["vec",3]]],[11,"null_count","","Count the null values.",19,[[]]],[11,"is_null","","Get a mask of the null values.",19,[[],["booleanchunked",6]]],[11,"u32","","Downcast",19,[[],[["uint32chunked",6],["result",6]]]],[11,"i32","","Downcast",19,[[],[["result",6],["int32chunked",6]]]],[11,"i64","","Downcast",19,[[],[["int64chunked",6],["result",6]]]],[11,"f32","","Downcast",19,[[],[["float32chunked",6],["result",6]]]],[11,"f64","","Downcast",19,[[],[["float64chunked",6],["result",6]]]],[11,"bool","","Downcast",19,[[],[["booleanchunked",6],["result",6]]]],[11,"utf8","","Downcast",19,[[],[["result",6],["utf8chunked",6]]]],[11,"date32","","Downcast",19,[[],[["date32chunked",6],["result",6]]]],[11,"date64","","Downcast",19,[[],[["date64chunked",6],["result",6]]]],[11,"time64ns","","Downcast",19,[[],[["result",6],["time64nschunked",6]]]],[11,"duration_ns","","Downcast",19,[[],[["result",6],["durationnschunked",6]]]],[11,"limit","","Take a view of top n elements",19,[[],["result",6]]],[11,"filter","","Chunk sizes should match or rhs should have one chunk",19,[[["booleanchunked",6]],["result",6]]],[11,"append_array","","Append arrow array in place.",19,[[["arrayref",6]],["result",6]]],[11,"len","","Combined length of all the chunks.",19,[[]]],[11,"get","","Get a single value. Beware this is slow.",19,[[],["anytype",4]]],[11,"slice","","Slice the array. The chunks are reallocated the underlying…",19,[[],["result",6]]],[11,"head","","Get the head of the ChunkedArray",19,[[["option",4]]]],[11,"tail","","Get the tail of the ChunkedArray",19,[[["option",4]]]],[11,"append","","Append in place.",19,[[]]],[11,"new_utf8_from_slice","","",19,[[]]],[11,"new_utf8_from_opt_slice","","",19,[[]]],[11,"name","","Name of the ChunkedArray.",19,[[]]],[11,"ref_field","","Get a reference to the field.",19,[[],["field",3]]],[11,"rename","","Rename this ChunkedArray.",19,[[]]],[11,"new_from_slice","","",19,[[]]],[11,"new_from_opt_slice","","",19,[[]]],[11,"new_with_null_bitmap","","Nullify values in slice with an existing null bitmap",19,[[["buffer",3],["option",4]]]],[11,"cont_slice","","Contiguous slice",19,[[],["result",6]]],[11,"data_views","","Get slices of the underlying arrow data. NOTE: null values…",19,[[],["vec",3]]],[11,"as_single_ptr","","Rechunk and return a ptr to the start of the array",19,[[]]],[11,"map","","If cont_slice is successful a closure is mapped over the…",19,[[],[["map",3],["result",6]]]],[11,"map_null_checks","","If cont_slice fails we can fallback on an iterator with…",19,[[],[["box",3],["map",3]]]],[11,"fold","","If cont_slice is successful a closure can be applied as…",19,[[],["result",6]]],[11,"fold_null_checks","","If cont_slice fails we can fallback on an iterator with…",19,[[]]],[0,"datatypes","polars","",null,null],[3,"BooleanType","polars::datatypes","",null,null],[3,"Date32Type","","",null,null],[3,"Date64Type","","",null,null],[4,"DateUnit","","Date is either a 32-bit or 64-bit type representing…",null,null],[13,"Day","","Days since the UNIX epoch.",20,null],[13,"Millisecond","","Milliseconds indicating UNIX time elapsed since the epoch…",20,null],[3,"DurationNanosecondType","","",null,null],[3,"Float32Type","","",null,null],[3,"Float64Type","","",null,null],[3,"Int32Type","","",null,null],[3,"Int64Type","","",null,null],[3,"Time64NanosecondType","","",null,null],[4,"TimeUnit","","An absolute length of time in seconds, milliseconds,…",null,null],[13,"Second","","Time in seconds.",21,null],[13,"Millisecond","","Time in milliseconds.",21,null],[13,"Microsecond","","Time in microseconds.",21,null],[13,"Nanosecond","","Time in nanoseconds.",21,null],[3,"UInt32Type","","",null,null],[4,"ArrowDataType","","The set of datatypes that are supported by this…",null,null],[13,"Null","","Null type",22,null],[13,"Boolean","","A boolean datatype representing the values `true` and…",22,null],[13,"Int8","","A signed 8-bit integer.",22,null],[13,"Int16","","A signed 16-bit integer.",22,null],[13,"Int32","","A signed 32-bit integer.",22,null],[13,"Int64","","A signed 64-bit integer.",22,null],[13,"UInt8","","An unsigned 8-bit integer.",22,null],[13,"UInt16","","An unsigned 16-bit integer.",22,null],[13,"UInt32","","An unsigned 32-bit integer.",22,null],[13,"UInt64","","An unsigned 64-bit integer.",22,null],[13,"Float16","","A 16-bit floating point number.",22,null],[13,"Float32","","A 32-bit floating point number.",22,null],[13,"Float64","","A 64-bit floating point number.",22,null],[13,"Timestamp","","A timestamp with an optional timezone.",22,null],[13,"Date32","","A 32-bit date representing the elapsed time since UNIX…",22,null],[13,"Date64","","A 64-bit date representing the elapsed time since UNIX…",22,null],[13,"Time32","","A 32-bit time representing the elapsed time since midnight…",22,null],[13,"Time64","","A 64-bit time representing the elapsed time since midnight…",22,null],[13,"Duration","","Measure of elapsed time in either seconds, milliseconds,…",22,null],[13,"Interval","","A \\\"calendar\\\" interval which models types that don\'t…",22,null],[13,"Binary","","Opaque binary data of variable length.",22,null],[13,"FixedSizeBinary","","Opaque binary data of fixed size. Enum parameter specifies…",22,null],[13,"LargeBinary","","Opaque binary data of variable length and 64-bit offsets.",22,null],[13,"Utf8","","A variable-length string in Unicode with UTF-8 encoding.",22,null],[13,"LargeUtf8","","A variable-length string in Unicode with UFT-8 encoding…",22,null],[13,"List","","A list of some logical data type with variable length.",22,null],[13,"FixedSizeList","","A list of some logical data type with fixed length.",22,null],[13,"LargeList","","A list of some logical data type with variable length and…",22,null],[13,"Struct","","A nested datatype that contains a number of sub-fields.",22,null],[13,"Union","","A nested datatype that can represent slots of differing…",22,null],[13,"Dictionary","","A dictionary array where each element is a single value…",22,null],[3,"Utf8Type","","",null,null],[4,"AnyType","","",null,null],[13,"Null","","",23,null],[13,"Bool","","",23,null],[13,"I32","","",23,null],[13,"I64","","",23,null],[13,"F32","","",23,null],[13,"F64","","",23,null],[13,"U32","","",23,null],[13,"Str","","",23,null],[13,"Date64","","",23,null],[13,"Date32","","",23,null],[13,"Time64","","",23,null],[13,"Duration","","",23,null],[6,"BooleanChunked","","",null,null],[6,"UInt32Chunked","","",null,null],[6,"Int32Chunked","","",null,null],[6,"Int64Chunked","","",null,null],[6,"Float32Chunked","","",null,null],[6,"Float64Chunked","","",null,null],[6,"Utf8Chunked","","",null,null],[6,"Date32Chunked","","",null,null],[6,"Date64Chunked","","",null,null],[6,"DurationNsChunked","","",null,null],[6,"Time64NsChunked","","",null,null],[8,"PolarsDataType","","",null,null],[10,"get_data_type","","",24,[[],["arrowdatatype",4]]],[8,"PolarsNumericType","","",null,null],[8,"PolarsIntegerType","","",null,null],[8,"ToStr","","",null,null],[10,"to_str","","",25,[[]]],[0,"error","polars","",null,null],[4,"PolarsError","polars::error","",null,null],[13,"ArrowError","","",26,null],[13,"InvalidOperation","","",26,null],[13,"ChunkMisMatch","","",26,null],[13,"DataTypeMisMatch","","",26,null],[13,"NotFound","","",26,null],[13,"LengthMismatch","","",26,null],[13,"Other","","",26,null],[13,"NoSelection","","",26,null],[13,"OutOfBounds","","",26,null],[13,"NoSlice","","",26,null],[13,"NoData","","",26,null],[6,"Result","","",null,null],[0,"frame","polars","DataFrame module",null,null],[3,"DataFrame","polars::frame","",null,null],[0,"group_by","","",null,null],[3,"GroupBy","polars::frame::group_by","",null,null],[12,"by","","",27,null],[11,"groupby","polars::frame","Group DataFrame using a Series column.",28,[[],[["groupby",3],["result",6]]]],[11,"select","polars::frame::group_by","",27,[[]]],[11,"mean","","Aggregate grouped series and compute the mean per group.",27,[[],[["dataframe",3],["result",6]]]],[11,"sum","","Aggregate grouped series and compute the sum per group.",27,[[],[["dataframe",3],["result",6]]]],[11,"min","","Aggregate grouped series and compute the minimal value per…",27,[[],[["dataframe",3],["result",6]]]],[11,"max","","Aggregate grouped series and compute the maximum value per…",27,[[],[["dataframe",3],["result",6]]]],[11,"count","","Aggregate grouped series and compute the number of values…",27,[[],[["dataframe",3],["result",6]]]],[0,"hash_join","polars::frame","",null,null],[8,"HashJoin","polars::frame::hash_join","",null,null],[10,"hash_join_inner","","",29,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_left","","",29,[[["chunkedarray",3]],["vec",3]]],[10,"hash_join_outer","","",29,[[["chunkedarray",3]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"inner_join","polars::frame","Perform an inner join on two DataFrames.",28,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[11,"left_join","","Perform a left join on two DataFrames # Example",28,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[11,"outer_join","","Perform an outer join on two DataFrames # Example",28,[[["dataframe",3]],[["dataframe",3],["result",6]]]],[0,"select","","",null,null],[8,"Selection","polars::frame::select","",null,null],[10,"to_selection_vec","","",30,[[],["vec",3]]],[0,"ser","polars::frame","",null,null],[5,"finish_reader","polars::frame::ser","",null,[[["arrowreader",8]],[["dataframe",3],["result",6]]]],[0,"csv","","(De)serializing CSV files",null,null],[3,"ReaderBuilder","polars::frame::ser::csv","CSV file reader builder",null,null],[3,"WriterBuilder","","A CSV writer builder",null,null],[3,"CsvWriter","","Write a DataFrame to csv.",null,null],[3,"CsvReader","","Creates a DataFrame after reading a csv.",null,null],[11,"new","","",31,[[]]],[11,"has_headers","","Set whether to write headers",31,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",31,[[]]],[11,"with_date_format","","Set the CSV file\'s date format",31,[[["string",3]]]],[11,"with_time_format","","Set the CSV file\'s time format",31,[[["string",3]]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp formatch array in",31,[[["string",3]]]],[11,"finish","","",31,[[["dataframe",3]],["result",6]]],[11,"with_schema","","Create a new DataFrame by reading a csv file.",32,[[["arc",3],["schema",3]]]],[11,"has_header","","Set whether the CSV file has headers",32,[[]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",32,[[]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",32,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",32,[[]]],[11,"with_projection","","Set the reader\'s column projection",32,[[["vec",3]]]],[0,"json","polars::frame::ser","(De)serialize JSON files.",null,null],[3,"ReaderBuilder","polars::frame::ser::json","JSON file reader builder",null,null],[3,"JsonReader","","",null,null],[11,"with_schema","","Set the JSON file\'s schema",33,[[["arc",3],["schema",3]]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",33,[[["option",4]]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",33,[[]]],[11,"with_projection","","Set the reader\'s column projection",33,[[["string",3],["vec",3]]]],[8,"SerReader","polars::frame::ser","",null,null],[10,"new","","",34,[[]]],[10,"set_rechunk","","Rechunk to a single chunk after Reading file.",34,[[]]],[10,"finish","","Take the SerReader and return a parsed DataFrame.",34,[[],[["dataframe",3],["result",6]]]],[8,"ArrowReader","","",null,null],[10,"next","","",35,[[],[["option",4],["arrowresult",6]]]],[10,"schema","","",35,[[],[["arc",3],["schema",3]]]],[11,"new","polars::frame","Create a DataFrame from a Vector of Series.",28,[[["vec",3],["series",4]],["result",6]]],[11,"schema","","Get a reference to the DataFrame schema.",28,[[],["arc",3]]],[11,"get_columns","","Get a reference to the DataFrame columns.",28,[[],["vec",3]]],[11,"columns","","Get the column labels of the DataFrame.",28,[[],["vec",3]]],[11,"n_chunks","","The number of chunks per column",28,[[],["result",6]]],[11,"fields","","Get a reference the schema fields of the DataFrame.",28,[[],["vec",3]]],[11,"shape","","Get (width x height)",28,[[]]],[11,"width","","Get width of DataFrame",28,[[]]],[11,"height","","Get height of DataFrame",28,[[]]],[11,"hstack","","Add series column to DataFrame",28,[[],["result",6]]],[11,"drop_in_place","","Remove column by name",28,[[],[["series",4],["result",6]]]],[11,"drop","","Drop a column by name. This is a pure method and will…",28,[[],[["dataframe",3],["result",6]]]],[11,"get","","Get a row in the dataframe. Beware this is slow.",28,[[],[["option",4],["vec",3]]]],[11,"select_idx","","Select a series by index.",28,[[],[["series",4],["option",4]]]],[11,"f_select_idx","","Force select.",28,[[],["series",4]]],[11,"select_idx_mut","","Select a mutable series by index.",28,[[],[["option",4],["series",4]]]],[11,"f_select_idx_mut","","Force select.",28,[[],["series",4]]],[11,"find_idx_by_name","","Get column index of a series by name.",28,[[],["option",4]]],[11,"column","","Select a single column by name.",28,[[],[["series",4],["option",4]]]],[11,"f_column","","Force select a single column.",28,[[],["series",4]]],[11,"select","","Select column(s) from this DataFrame.",28,[[],[["dataframe",3],["result",6]]]],[11,"select_mut","","Select a mutable series by name.",28,[[],[["option",4],["series",4]]]],[11,"f_select_mut","","Force select.",28,[[],["series",4]]],[11,"filter","","Take DataFrame rows by a boolean mask.",28,[[["booleanchunked",6]],["result",6]]],[11,"f_filter","","Force filter",28,[[["booleanchunked",6]]]],[11,"take_iter","","Take DataFrame value by indexes from an iterator.",28,[[["option",4]],["result",6]]],[11,"take_opt_iter","","",28,[[["option",4]],["result",6]]],[11,"take","","Take DataFrame rows by index values.",28,[[],["result",6]]],[11,"f_take","","Force take",28,[[]]],[11,"rename","","Rename a column in the DataFrame",28,[[],["result",6]]],[11,"sort_in_place","","Sort DataFrame in place by a column.",28,[[],["result",6]]],[11,"sort","","",28,[[],["result",6]]],[11,"replace","","Replace a column with a series.",28,[[["series",4]],["result",6]]],[11,"slice","","Slice the DataFrame along the rows.",28,[[],["result",6]]],[11,"head","","Get the head of the DataFrame",28,[[["option",4]]]],[11,"tail","","Get the tail of the DataFrame",28,[[["option",4]]]],[11,"as_record_batches","","Transform the underlying chunks in the DataFrame to Arrow…",28,[[],[["vec",3],["result",6]]]],[11,"reverse","","Get a DataFrame with all the columns in reversed order",28,[[]]],[0,"prelude","polars","",null,null],[8,"ArrowPrimitiveType","polars::prelude","Trait indicating a primitive fixed-width type (bool, ints…",null,null],[16,"Native","","Corresponding Rust native type for the primitive type.",36,null],[10,"get_data_type","","Returns the corresponding Arrow data type of this…",36,[[],["datatype",4]]],[10,"get_bit_width","","Returns the bit width of this primitive type.",36,[[]]],[10,"default_value","","Returns a default value of this primitive type.",36,[[]]],[3,"Field","","Contains the meta-data for a single relative type.",null,null],[3,"Schema","","Describes the meta-data of an ordered sequence of relative…",null,null],[8,"ChunkOps","","",null,null],[10,"rechunk","","Aggregate to chunk id. A chunk id is a vector of the chunk…",37,[[["option",4]],["result",6]]],[10,"optional_rechunk","","Only rechunk if lhs and rhs don\'t match",37,[[["chunkedarray",3]],[["option",4],["result",6]]]],[8,"LhsNumOps","","",null,null],[16,"Output","","",38,null],[10,"add","","",38,[[]]],[10,"sub","","",38,[[]]],[10,"div","","",38,[[]]],[10,"mul","","",38,[[]]],[0,"series","polars","Series The columnar data type for a DataFrame. The Series…",null,null],[4,"Series","polars::series","",null,null],[13,"UInt32","","",39,null],[13,"Int32","","",39,null],[13,"Int64","","",39,null],[13,"Float32","","",39,null],[13,"Float64","","",39,null],[13,"Utf8","","",39,null],[13,"Bool","","",39,null],[13,"Date32","","",39,null],[13,"Date64","","",39,null],[13,"Time64Ns","","",39,null],[13,"DurationNs","","",39,null],[11,"sum","","Returns `None` if the array is empty or only contains null…",39,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",39,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",39,[[],["option",4]]],[11,"mean","","",39,[[],["option",4]]],[8,"NamedFrom","","",null,null],[10,"new","","Initialize by name and values.",40,[[]]],[11,"from_chunked_array","","",39,[[["polarsdatatype",8],["chunkedarray",3]]]],[11,"chunk_lengths","","Get the lengths of the underlying chunks",39,[[],["vec",3]]],[11,"name","","Name of series.",39,[[]]],[11,"rename","","Rename series.",39,[[]]],[11,"field","","Get field (used in schema)",39,[[],["field",3]]],[11,"dtype","","Get datatype of series.",39,[[],["arrowdatatype",4]]],[11,"chunks","","Underlying chunks.",39,[[],["vec",3]]],[11,"n_chunks","","No. of chunks",39,[[]]],[11,"i32","","Unpack to ChunkedArray `# use polars::prelude::*; let s:…",39,[[],[["result",6],["int32chunked",6]]]],[11,"i64","","Unpack to ChunkedArray",39,[[],[["result",6],["int64chunked",6]]]],[11,"f32","","Unpack to ChunkedArray",39,[[],[["result",6],["float32chunked",6]]]],[11,"f64","","Unpack to ChunkedArray",39,[[],[["result",6],["float64chunked",6]]]],[11,"u32","","Unpack to ChunkedArray",39,[[],[["result",6],["uint32chunked",6]]]],[11,"bool","","Unpack to ChunkedArray",39,[[],[["booleanchunked",6],["result",6]]]],[11,"utf8","","Unpack to ChunkedArray",39,[[],[["utf8chunked",6],["result",6]]]],[11,"date32","","Unpack to ChunkedArray",39,[[],[["result",6],["date32chunked",6]]]],[11,"date64","","Unpack to ChunkedArray",39,[[],[["date64chunked",6],["result",6]]]],[11,"time64ns","","Unpack to ChunkedArray",39,[[],[["result",6],["time64nschunked",6]]]],[11,"duration_ns","","Unpack to ChunkedArray",39,[[],[["durationnschunked",6],["result",6]]]],[11,"append_array","","",39,[[["arrayref",6]],["result",6]]],[11,"limit","","Take `num_elements` from the top as a zero copy view.",39,[[],["result",6]]],[11,"slice","","Get a zero copy view of the data.",39,[[],["result",6]]],[11,"append","","Append a Series of the same type in place.",39,[[],["result",6]]],[11,"filter","","Filter by boolean mask. This operation clones data.",39,[[["booleanchunked",6],["asref",8]],["result",6]]],[11,"take_iter","","Take by index from an iterator. This operation clones the…",39,[[["option",4]],["result",6]]],[11,"take_opt_iter","","Take by index from an iterator. This operation clones the…",39,[[["option",4]],["result",6]]],[11,"take","","Take by index. This operation is clone.",39,[[],["result",6]]],[11,"len","","Get length of series.",39,[[]]],[11,"rechunk","","Aggregate all chunks to a contiguous array of memory.",39,[[["option",4]],["result",6]]],[11,"head","","Get the head of the Series.",39,[[["option",4]]]],[11,"tail","","Get the tail of the Series.",39,[[["option",4]]]],[11,"cast","","Cast to an some primitive type.",39,[[],["result",6]]],[11,"get","","Get a single value by index. Don\'t use this operation for…",39,[[],["anytype",4]]],[11,"sort_in_place","","Sort in place.",39,[[]]],[11,"sort","","",39,[[]]],[11,"argsort","","Retrieve the indexes needed for a sort.",39,[[],["vec",3]]],[11,"null_count","","Count the null values.",39,[[]]],[11,"unique","","Get unique values in the Series.",39,[[]]],[11,"arg_unique","","Get first indexes of unique values.",39,[[],["vec",3]]],[11,"is_null","","Get a mask of the null values.",39,[[],["booleanchunked",6]]],[11,"null_bits","","Get the bits that represent the null values of the…",39,[[],["vec",3]]],[11,"reverse","","return a Series in reversed order",39,[[]]],[11,"as_single_ptr","","Rechunk and return a pointer to the start of the Series.…",39,[[]]],[0,"testing","polars","",null,null],[11,"series_equal","polars::series","",39,[[["series",4]]]],[11,"frame_equal","polars::frame","",28,[[["dataframe",3]]]],[14,"exec_concurrent","polars","",null,null],[14,"apply_operand_on_chunkedarray_by_iter","","",null,null],[14,"apply_method_all_series","","",null,null],[14,"apply_method_numeric_series","","",null,null],[11,"from","polars::chunked_array","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"vzip","","",19,[[]]],[11,"from","polars::chunked_array::builder","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","polars::chunked_array::iterator","",41,[[]]],[11,"into","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"vzip","","",41,[[]]],[11,"to_bytes","","",41,[[],["utf8charsplitter",3]]],[11,"to_units","","",41,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",41,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",41,[[],["utf16charmerger",3]]],[11,"par_bridge","","",41,[[],["iterbridge",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"vzip","","",42,[[]]],[11,"to_bytes","","",42,[[],["utf8charsplitter",3]]],[11,"to_units","","",42,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",42,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",42,[[],["utf16charmerger",3]]],[11,"par_bridge","","",42,[[],["iterbridge",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"vzip","","",43,[[]]],[11,"to_bytes","","",43,[[],["utf8charsplitter",3]]],[11,"to_units","","",43,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",43,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",43,[[],["utf16charmerger",3]]],[11,"par_bridge","","",43,[[],["iterbridge",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"vzip","","",44,[[]]],[11,"to_bytes","","",44,[[],["utf8charsplitter",3]]],[11,"to_units","","",44,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",44,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",44,[[],["utf16charmerger",3]]],[11,"par_bridge","","",44,[[],["iterbridge",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"into_iter","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"vzip","","",45,[[]]],[11,"to_bytes","","",45,[[],["utf8charsplitter",3]]],[11,"to_units","","",45,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",45,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",45,[[],["utf16charmerger",3]]],[11,"par_bridge","","",45,[[],["iterbridge",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"into_iter","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"vzip","","",46,[[]]],[11,"to_bytes","","",46,[[],["utf8charsplitter",3]]],[11,"to_units","","",46,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",46,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",46,[[],["utf16charmerger",3]]],[11,"par_bridge","","",46,[[],["iterbridge",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"into_iter","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"vzip","","",47,[[]]],[11,"to_bytes","","",47,[[],["utf8charsplitter",3]]],[11,"to_units","","",47,[[],["utf16charsplitter",3]]],[11,"to_utf8chars","","",47,[[],["utf8charmerger",3]]],[11,"to_utf16chars","","",47,[[],["utf16charmerger",3]]],[11,"par_bridge","","",47,[[],["iterbridge",3]]],[11,"from","polars::chunked_array::take","",48,[[]]],[11,"into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"vzip","","",48,[[]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"vzip","","",49,[[]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"vzip","","",50,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"vzip","","",51,[[]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"vzip","","",52,[[]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"vzip","","",53,[[]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"vzip","","",54,[[]]],[11,"get_data_type","polars::datatypes","",55,[[],["datatype",4]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"vzip","","",55,[[]]],[11,"get_data_type","","",56,[[],["datatype",4]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"vzip","","",56,[[]]],[11,"get_data_type","","",57,[[],["datatype",4]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"vzip","","",57,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"equivalent","","",20,[[]]],[11,"vzip","","",20,[[]]],[11,"get_data_type","","",58,[[],["datatype",4]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"vzip","","",58,[[]]],[11,"get_data_type","","",59,[[],["datatype",4]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"vzip","","",59,[[]]],[11,"get_data_type","","",60,[[],["datatype",4]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"vzip","","",60,[[]]],[11,"get_data_type","","",61,[[],["datatype",4]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"vzip","","",61,[[]]],[11,"get_data_type","","",62,[[],["datatype",4]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"vzip","","",62,[[]]],[11,"get_data_type","","",63,[[],["datatype",4]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"vzip","","",63,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"equivalent","","",21,[[]]],[11,"vzip","","",21,[[]]],[11,"get_data_type","","",64,[[],["datatype",4]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"vzip","","",64,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[]]],[11,"vzip","","",22,[[]]],[11,"get_data_type","","",65,[[],["datatype",4]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"vzip","","",65,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_string","","",23,[[],["string",3]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"vzip","","",23,[[]]],[11,"from","polars::error","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_string","","",26,[[],["string",3]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","polars::frame","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"to_string","","",28,[[],["string",3]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","polars::frame::group_by","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","polars::frame::ser::csv","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"vzip","","",66,[[]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"vzip","","",67,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"vzip","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"vzip","","",32,[[]]],[11,"from","polars::frame::ser::json","",68,[[]]],[11,"into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"vzip","","",68,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"vzip","","",33,[[]]],[11,"from","polars::prelude","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"to_string","","",69,[[],["string",3]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"equivalent","","",69,[[]]],[11,"vzip","","",69,[[]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"to_string","","",70,[[],["string",3]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"equivalent","","",70,[[]]],[11,"vzip","","",70,[[]]],[11,"from","polars::series","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"to_string","","",39,[[],["string",3]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"vzip","","",39,[[]]],[11,"clone","polars::datatypes","",22,[[],["datatype",4]]],[11,"clone","polars::prelude","",69,[[],["field",3]]],[11,"clone","polars::datatypes","",20,[[],["dateunit",4]]],[11,"clone","","",21,[[],["timeunit",4]]],[11,"clone","polars::prelude","",70,[[],["schema",3]]],[11,"get_data_type","polars::datatypes","",61,[[],["datatype",4]]],[11,"get_bit_width","","",61,[[]]],[11,"default_value","","",61,[[]]],[11,"get_data_type","","",57,[[],["datatype",4]]],[11,"get_bit_width","","",57,[[]]],[11,"default_value","","",57,[[]]],[11,"get_data_type","","",60,[[],["datatype",4]]],[11,"get_bit_width","","",60,[[]]],[11,"default_value","","",60,[[]]],[11,"get_data_type","","",56,[[],["datatype",4]]],[11,"get_bit_width","","",56,[[]]],[11,"default_value","","",56,[[]]],[11,"get_data_type","","",59,[[],["datatype",4]]],[11,"get_bit_width","","",59,[[]]],[11,"default_value","","",59,[[]]],[11,"get_data_type","","",55,[[],["datatype",4]]],[11,"get_bit_width","","",55,[[]]],[11,"default_value","","",55,[[]]],[11,"get_data_type","","",64,[[],["datatype",4]]],[11,"get_bit_width","","",64,[[]]],[11,"default_value","","",64,[[]]],[11,"get_data_type","","",63,[[],["datatype",4]]],[11,"get_bit_width","","",63,[[]]],[11,"default_value","","",63,[[]]],[11,"get_data_type","","",62,[[],["datatype",4]]],[11,"get_bit_width","","",62,[[]]],[11,"default_value","","",62,[[]]],[11,"get_data_type","","",58,[[],["datatype",4]]],[11,"get_bit_width","","",58,[[]]],[11,"default_value","","",58,[[]]],[11,"partial_cmp","polars::prelude","",69,[[["field",3]],[["ordering",4],["option",4]]]],[11,"lt","","",69,[[["field",3]]]],[11,"le","","",69,[[["field",3]]]],[11,"gt","","",69,[[["field",3]]]],[11,"ge","","",69,[[["field",3]]]],[11,"partial_cmp","polars::datatypes","",20,[[["dateunit",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",22,[[["datatype",4]],[["ordering",4],["option",4]]]],[11,"lt","","",22,[[["datatype",4]]]],[11,"le","","",22,[[["datatype",4]]]],[11,"gt","","",22,[[["datatype",4]]]],[11,"ge","","",22,[[["datatype",4]]]],[11,"partial_cmp","","",21,[[["timeunit",4]],[["ordering",4],["option",4]]]],[11,"from","polars::prelude","",69,[[["field",3]],["field",3]]],[11,"serialize","","",70,[[],["result",4]]],[11,"serialize","polars::datatypes","",20,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","polars::prelude","",69,[[],["result",4]]],[11,"serialize","polars::datatypes","",21,[[],["result",4]]],[11,"eq","","",21,[[["timeunit",4]]]],[11,"eq","","",20,[[["dateunit",4]]]],[11,"eq","polars::prelude","",70,[[["schema",3]]]],[11,"ne","","",70,[[["schema",3]]]],[11,"eq","polars::datatypes","",22,[[["datatype",4]]]],[11,"ne","","",22,[[["datatype",4]]]],[11,"eq","polars::prelude","",69,[[["field",3]]]],[11,"ne","","",69,[[["field",3]]]],[11,"cmp","polars::datatypes","",20,[[["dateunit",4]],["ordering",4]]],[11,"cmp","","",21,[[["timeunit",4]],["ordering",4]]],[11,"cmp","polars::prelude","",69,[[["field",3]],["ordering",4]]],[11,"cmp","polars::datatypes","",22,[[["datatype",4]],["ordering",4]]],[11,"deserialize","polars::prelude","",69,[[],[["result",4],["field",3]]]],[11,"deserialize","","",70,[[],[["result",4],["schema",3]]]],[11,"deserialize","polars::datatypes","",20,[[],[["dateunit",4],["result",4]]]],[11,"deserialize","","",21,[[],[["result",4],["timeunit",4]]]],[11,"deserialize","","",22,[[],[["result",4],["datatype",4]]]],[11,"default","polars::frame::ser::csv","",67,[[],["writerbuilder",3]]],[11,"default","polars::frame::ser::json","",68,[[],["readerbuilder",3]]],[11,"default","polars::frame::ser::csv","",66,[[],["readerbuilder",3]]],[11,"fmt","polars::datatypes","",20,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",69,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::csv","",67,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::json","",68,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",60,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",62,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",64,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",57,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",63,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",55,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",59,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",70,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",21,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::frame::ser::csv","",66,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::datatypes","",58,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",61,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",22,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",56,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","polars::prelude","",70,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",69,[[["formatter",3]],[["error",3],["result",4]]]],[11,"hash","polars::datatypes","",20,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",22,[[]]],[11,"hash","polars::prelude","",69,[[]]],[11,"sum","polars::chunked_array","Returns `None` if the array is empty or only contains null…",19,[[],["option",4]]],[11,"min","","Returns the minimum value in the array, according to the…",19,[[],["option",4]]],[11,"max","","Returns the maximum value in the array, according to the…",19,[[],["option",4]]],[11,"sum","polars","Returns `None` if the array is empty or only contains null…",71,[[],["option",4]]],[11,"min","","",71,[[],["option",4]]],[11,"max","","",71,[[],["option",4]]],[11,"apply","polars::chunked_array","Chooses the fastest path for closure application. Null…",19,[[]]],[11,"apply","polars","",71,[[]]],[11,"apply","","",72,[[]]],[11,"pow_f32","polars::chunked_array","",19,[[],["float32chunked",6]]],[11,"pow_f64","","",19,[[],["float64chunked",6]]],[11,"cast","","",19,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","polars","",72,[[],[["result",6],["chunkedarray",3]]]],[11,"cast","","",71,[[],[["result",6],["chunkedarray",3]]]],[11,"rechunk","polars::chunked_array","",19,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",19,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"rechunk","polars","",71,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",71,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"rechunk","","",72,[[["option",4]],["result",6]]],[11,"optional_rechunk","","",72,[[["chunkedarray",3]],[["option",4],["result",6]]]],[11,"eq","polars::chunked_array","",19,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"neq","","",19,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt","","",19,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"gt_eq","","",19,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt","","",19,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"lt_eq","","",19,[[["chunkedarray",3]],["booleanchunked",6]]],[11,"eq","polars","",71,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"neq","","",71,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt","","",71,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",71,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt","","",71,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",71,[[["booleanchunked",6]],["booleanchunked",6]]],[11,"eq","","",72,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"neq","","",72,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt","","",72,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"gt_eq","","",72,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt","","",72,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"lt_eq","","",72,[[["utf8chunked",6]],["booleanchunked",6]]],[11,"eq","polars::chunked_array","",19,[[],["booleanchunked",6]]],[11,"neq","","",19,[[],["booleanchunked",6]]],[11,"gt","","",19,[[],["booleanchunked",6]]],[11,"gt_eq","","",19,[[],["booleanchunked",6]]],[11,"lt","","",19,[[],["booleanchunked",6]]],[11,"lt_eq","","",19,[[],["booleanchunked",6]]],[11,"eq","polars","",72,[[],["booleanchunked",6]]],[11,"neq","","",72,[[],["booleanchunked",6]]],[11,"gt","","",72,[[],["booleanchunked",6]]],[11,"gt_eq","","",72,[[],["booleanchunked",6]]],[11,"lt","","",72,[[],["booleanchunked",6]]],[11,"lt_eq","","",72,[[],["booleanchunked",6]]],[11,"eq","polars::series","Create a boolean mask by checking for equality.",39,[[["series",4]],["booleanchunked",6]]],[11,"neq","","Create a boolean mask by checking for inequality.",39,[[["series",4]],["booleanchunked",6]]],[11,"gt","","Create a boolean mask by checking if lhs > rhs.",39,[[["series",4]],["booleanchunked",6]]],[11,"gt_eq","","Create a boolean mask by checking if lhs >= rhs.",39,[[["series",4]],["booleanchunked",6]]],[11,"lt","","Create a boolean mask by checking if lhs < rhs.",39,[[["series",4]],["booleanchunked",6]]],[11,"lt_eq","","Create a boolean mask by checking if lhs <= rhs.",39,[[["series",4]],["booleanchunked",6]]],[11,"eq","","",39,[[],["booleanchunked",6]]],[11,"neq","","",39,[[],["booleanchunked",6]]],[11,"gt","","",39,[[],["booleanchunked",6]]],[11,"gt_eq","","",39,[[],["booleanchunked",6]]],[11,"lt","","",39,[[],["booleanchunked",6]]],[11,"lt_eq","","",39,[[],["booleanchunked",6]]],[11,"eq","","",39,[[],["booleanchunked",6]]],[11,"neq","","",39,[[],["booleanchunked",6]]],[11,"gt","","",39,[[],["booleanchunked",6]]],[11,"gt_eq","","",39,[[],["booleanchunked",6]]],[11,"lt","","",39,[[],["booleanchunked",6]]],[11,"lt_eq","","",39,[[],["booleanchunked",6]]],[11,"take","polars::chunked_array","",19,[[["option",4]],["result",6]]],[11,"take_opt","","",19,[[["option",4]],["result",6]]],[11,"take","polars","",71,[[["option",4]],["result",6]]],[11,"take_opt","","",71,[[["option",4]],["result",6]]],[11,"take","","",72,[[["option",4]],["result",6]]],[11,"take_opt","","",72,[[["option",4]],["result",6]]],[11,"get","polars::chunked_array::take","",48,[[],["option",4]]],[11,"get_unchecked","","",48,[[]]],[11,"get","","",49,[[],["option",4]]],[11,"get_unchecked","","",49,[[]]],[11,"get","","",50,[[],["option",4]]],[11,"get_unchecked","","",50,[[]]],[11,"get","","",51,[[],["option",4]]],[11,"get_unchecked","","",51,[[]]],[11,"get","","",52,[[],["option",4]]],[11,"get_unchecked","","",52,[[]]],[11,"get","","",53,[[],["option",4]]],[11,"get_unchecked","","",53,[[]]],[11,"get","","",54,[[],["option",4]]],[11,"get_unchecked","","",54,[[]]],[11,"unique","polars::chunked_array","",19,[[]]],[11,"arg_unique","","",19,[[],["vec",3]]],[11,"unique","polars","",72,[[]]],[11,"arg_unique","","",72,[[],["vec",3]]],[11,"unique","","",71,[[]]],[11,"arg_unique","","",71,[[],["vec",3]]],[11,"value_counts","polars::chunked_array","",19,[[],[["buildhasherdefault",3],["hashmap",3],["option",4]]]],[11,"downcast_chunks","","",19,[[],[["vec",3],["primitivearray",3]]]],[11,"downcast_chunks","polars","",72,[[],[["vec",3],["stringarray",3]]]],[11,"downcast_chunks","","",71,[[],[["booleanarray",6],["vec",3]]]],[11,"sort","polars::chunked_array","",19,[[],["chunkedarray",3]]],[11,"sort_in_place","","",19,[[]]],[11,"argsort","","",19,[[],["vec",3]]],[11,"sort","polars","",72,[[],["utf8chunked",6]]],[11,"sort_in_place","","",72,[[]]],[11,"argsort","","",72,[[],["vec",3]]],[11,"sort","","",71,[[],["booleanchunked",6]]],[11,"sort_in_place","","",71,[[]]],[11,"argsort","","",71,[[],["vec",3]]],[11,"full","polars::chunked_array","",19,[[]]],[11,"full","polars","",72,[[]]],[11,"reverse","polars::chunked_array","",19,[[],["chunkedarray",3]]],[11,"reverse","polars","",71,[[]]],[11,"reverse","","",72,[[]]],[11,"get_data_type","polars::datatypes","",65,[[],["arrowdatatype",4]]],[11,"to_str","","",22,[[]]],[11,"hash_join_inner","polars::chunked_array","",19,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_left","","",19,[[["chunkedarray",3]],["vec",3]]],[11,"hash_join_outer","","",19,[[["chunkedarray",3]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"hash_join_inner","polars","",71,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_left","","",71,[[["booleanchunked",6]],["vec",3]]],[11,"hash_join_outer","","",71,[[["booleanchunked",6]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"hash_join_inner","","",72,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_left","","",72,[[["utf8chunked",6]],["vec",3]]],[11,"hash_join_outer","","",72,[[["utf8chunked",6]],[["hashset",3],["fnvbuildhasher",6]]]],[11,"new","polars::frame::ser::csv","Create a new CsvReader from a file/ stream",32,[[]]],[11,"set_rechunk","","Rechunk to one contiguous chunk of memory after all data…",32,[[]]],[11,"finish","","Read the file and create the DataFrame.",32,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::frame::ser::json","",33,[[]]],[11,"set_rechunk","","",33,[[]]],[11,"finish","","",33,[[],[["dataframe",3],["result",6]]]],[11,"new","polars::series","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"new","","",39,[[]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_mut","","",39,[[],["chunkedarray",3]]],[11,"as_ref","polars::chunked_array","",19,[[],["chunkedarray",3]]],[11,"as_ref","polars::series","",39,[[],["chunkedarray",3]]],[11,"as_ref","","",39,[[],["chunkedarray",3]]],[11,"as_ref","","",39,[[],["chunkedarray",3]]],[11,"as_ref","","",39,[[],["chunkedarray",3]]],[11,"as_ref","","",39,[[],["chunkedarray",3]]],[11,"as_ref","","",39,[[],["chunkedarray",3]]],[11,"as_ref","","",39,[[],["chunkedarray",3]]],[11,"from","polars::error","",26,[[["arrowerror",4]]]],[11,"len","polars::chunked_array::iterator","",45,[[]]],[11,"len","","",46,[[]]],[11,"len","","",47,[[]]],[11,"next","","",41,[[],["option",4]]],[11,"size_hint","","",41,[[]]],[11,"next","","",42,[[],["option",4]]],[11,"size_hint","","",42,[[]]],[11,"next","","",43,[[],["option",4]]],[11,"size_hint","","",43,[[]]],[11,"next","","",44,[[],["option",4]]],[11,"size_hint","","",44,[[]]],[11,"next","","",45,[[],["option",4]]],[11,"size_hint","","",45,[[]]],[11,"next","","",46,[[],["option",4]]],[11,"size_hint","","",46,[[]]],[11,"next","","",47,[[],["option",4]]],[11,"size_hint","","",47,[[]]],[11,"clone","polars::chunked_array","",19,[[]]],[11,"clone","polars::frame::group_by","",27,[[],["groupby",3]]],[11,"clone","polars::frame","",28,[[],["dataframe",3]]],[11,"clone","polars::series","",39,[[],["series",4]]],[11,"eq","polars::datatypes","",23,[[["anytype",4]]]],[11,"ne","","",23,[[["anytype",4]]]],[11,"deref","polars::chunked_array::builder","",3,[[]]],[11,"deref","","",4,[[]]],[11,"deref","polars::datatypes","",65,[[]]],[11,"deref_mut","polars::chunked_array::builder","",3,[[]]],[11,"deref_mut","","",4,[[]]],[11,"deref_mut","polars::datatypes","",65,[[]]],[11,"fmt","polars::chunked_array","",19,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",23,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",26,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",39,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",28,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame::group_by","",27,[[["formatter",3]],["result",6]]],[11,"fmt","polars::error","",26,[[["formatter",3]],["result",6]]],[11,"fmt","polars::series","",39,[[["formatter",3]],["result",6]]],[11,"fmt","polars::frame","",28,[[["formatter",3]],["result",6]]],[11,"fmt","polars::datatypes","",23,[[["formatter",3]],["result",6]]],[11,"div","polars::chunked_array","",19,[[]]],[11,"div","polars::series","",39,[[]]],[11,"div","","",39,[[]]],[11,"sub","polars::chunked_array","",19,[[]]],[11,"sub","polars::series","",39,[[]]],[11,"sub","","",39,[[]]],[11,"add","polars::chunked_array","",19,[[]]],[11,"add","polars::series","",39,[[]]],[11,"add","","",39,[[]]],[11,"mul","polars::chunked_array","",19,[[]]],[11,"mul","polars::series","",39,[[]]],[11,"mul","","",39,[[]]],[11,"from_iter","polars::chunked_array","",19,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array::builder","",5,[[["intoiterator",8]]]],[11,"from_iter","polars::chunked_array","",19,[[["intoiterator",8]]]],[11,"from_iter","polars","",71,[[["intoiterator",8]]]],[11,"from_iter","","",72,[[["intoiterator",8]]]],[11,"from_iter","","",72,[[["intoiterator",8]]]],[11,"from_iter","","",72,[[["intoiterator",8]]]],[11,"from_iter","polars::series","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"from_iter","","",39,[[["intoiterator",8]]]],[11,"source","polars::error","",26,[[],[["option",4],["error",8]]]],[11,"new_utf8_from_slice","polars::datatypes","",72,[[]]],[11,"new_utf8_from_opt_slice","","",72,[[]]],[11,"to_json","","Generate a JSON representation of the data type",22,[[],["value",4]]],[11,"new","polars::frame::ser::csv","Create a new builder for configuring CSV parsing options.",66,[[],["readerbuilder",3]]],[11,"with_schema","","Set the CSV file\'s schema",66,[[["arc",3],["schema",3]],["readerbuilder",3]]],[11,"has_header","","Set whether the CSV file has headers",66,[[],["readerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",66,[[],["readerbuilder",3]]],[11,"infer_schema","","Set the CSV reader to infer the schema of the file",66,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",66,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",66,[[["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",66,[[],[["result",4],["arrowerror",4],["reader",3]]]],[11,"new","","Create a new builder for configuring CSV writing options.",67,[[],["writerbuilder",3]]],[11,"has_headers","","Set whether to write headers",67,[[],["writerbuilder",3]]],[11,"with_delimiter","","Set the CSV file\'s column delimiter as a byte character",67,[[],["writerbuilder",3]]],[11,"with_date_format","","Set the CSV file\'s date format",67,[[["string",3]],["writerbuilder",3]]],[11,"with_time_format","","Set the CSV file\'s time format",67,[[["string",3]],["writerbuilder",3]]],[11,"with_timestamp_format","","Set the CSV file\'s timestamp format",67,[[["string",3]],["writerbuilder",3]]],[11,"build","","Create a new `Writer`",67,[[],["writer",3]]],[11,"new","polars::frame::ser::json","Create a new builder for configuring JSON parsing options.",68,[[],["readerbuilder",3]]],[11,"with_schema","","Set the JSON file\'s schema",68,[[["arc",3],["schema",3]],["readerbuilder",3]]],[11,"infer_schema","","Set the JSON reader to infer the schema of the file",68,[[["option",4]],["readerbuilder",3]]],[11,"with_batch_size","","Set the batch size (number of records to load at one time)",68,[[],["readerbuilder",3]]],[11,"with_projection","","Set the reader\'s column projection",68,[[["string",3],["vec",3]],["readerbuilder",3]]],[11,"build","","Create a new `Reader` from the `ReaderBuilder`",68,[[],[["arrowerror",4],["reader",3],["result",4]]]],[11,"new","polars::prelude","Creates a new field",69,[[["datatype",4]],["field",3]]],[11,"new_dict","","Creates a new field",69,[[["datatype",4]],["field",3]]],[11,"name","","Returns an immutable reference to the `Field`\'s name",69,[[],["string",3]]],[11,"data_type","","Returns an immutable reference to the `Field`\'s  data-type",69,[[],["datatype",4]]],[11,"is_nullable","","Indicates whether this `Field` supports null values",69,[[]]],[11,"from","","Parse a `Field` definition from a JSON representation",69,[[["value",4]],[["arrowerror",4],["result",4],["field",3]]]],[11,"to_json","","Generate a JSON representation of the `Field`",69,[[],["value",4]]],[11,"try_merge","","Merge field into self if it is compatible. Struct will be…",69,[[["field",3]],[["arrowerror",4],["result",4]]]],[11,"empty","","Creates an empty `Schema`",70,[[],["schema",3]]],[11,"new","","Creates a new `Schema` from a sequence of `Field` values",70,[[["vec",3],["field",3]],["schema",3]]],[11,"new_with_metadata","","Creates a new `Schema` from a sequence of `Field` values…",70,[[["randomstate",3],["vec",3],["field",3],["string",3],["hashmap",3]],["schema",3]]],[11,"try_merge","","Merge schema into self if it is compatible. Struct fields…",70,[[],[["result",4],["arrowerror",4],["schema",3]]]],[11,"fields","","Returns an immutable reference of the vector of `Field`…",70,[[],["vec",3]]],[11,"field","","Returns an immutable reference of a specific `Field`…",70,[[],["field",3]]],[11,"field_with_name","","Returns an immutable reference of a specific `Field`…",70,[[],[["field",3],["arrowerror",4],["result",4]]]],[11,"index_of","","Find the index of the column with the given name",70,[[],[["arrowerror",4],["result",4]]]],[11,"metadata","","Returns an immutable reference to the Map of custom…",70,[[],["hashmap",3]]],[11,"column_with_name","","Look up a column by name and return a immutable reference…",70,[[],["option",4]]],[11,"to_json","","Generate a JSON representation of the `Schema`",70,[[],["value",4]]],[11,"from","","Parse a `Schema` definition from a JSON representation",70,[[["value",4]],[["result",4],["arrowerror",4],["schema",3]]]]],"p":[[8,"Agg"],[8,"Apply"],[8,"Pow"],[3,"PrimitiveChunkedBuilder"],[3,"Utf8ChunkedBuilder"],[3,"AlignedVec"],[8,"AlignedAlloc"],[8,"ChunkCast"],[8,"CmpOps"],[8,"Take"],[8,"TakeIndex"],[8,"IntoTakeRandom"],[8,"TakeRandom"],[8,"Unique"],[8,"ValueCounts"],[8,"Downcast"],[8,"ChunkSort"],[8,"ChunkFull"],[8,"Reverse"],[3,"ChunkedArray"],[4,"DateUnit"],[4,"TimeUnit"],[4,"ArrowDataType"],[4,"AnyType"],[8,"PolarsDataType"],[8,"ToStr"],[4,"PolarsError"],[3,"GroupBy"],[3,"DataFrame"],[8,"HashJoin"],[8,"Selection"],[3,"CsvWriter"],[3,"CsvReader"],[3,"JsonReader"],[8,"SerReader"],[8,"ArrowReader"],[8,"ArrowPrimitiveType"],[8,"ChunkOps"],[8,"LhsNumOps"],[4,"Series"],[8,"NamedFrom"],[3,"NumIterSingleChunkNullCheck"],[3,"NumIterSingleChunk"],[3,"NumIterManyChunkNullCheck"],[3,"NumIterManyChunk"],[3,"ChunkStringIter"],[3,"ChunkBoolIter"],[3,"ChunkNumIter"],[3,"NumTakeRandomChunked"],[3,"NumTakeRandomCont"],[3,"NumTakeRandomSingleChunk"],[3,"Utf8TakeRandom"],[3,"Utf8TakeRandomSingleChunk"],[3,"BoolTakeRandom"],[3,"BoolTakeRandomSingleChunk"],[3,"BooleanType"],[3,"Date32Type"],[3,"Date64Type"],[3,"DurationNanosecondType"],[3,"Float32Type"],[3,"Float64Type"],[3,"Int32Type"],[3,"Int64Type"],[3,"Time64NanosecondType"],[3,"UInt32Type"],[3,"Utf8Type"],[3,"ReaderBuilder"],[3,"WriterBuilder"],[3,"ReaderBuilder"],[3,"Field"],[3,"Schema"],[6,"BooleanChunked"],[6,"Utf8Chunked"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);